type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("A1");
            checkShot(getFieldMatrix(output), "A1", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output) || !output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("E4");
            checkMissing(getFieldMatrix(output), "E4", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                    "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/ships/Cruiser.java
  visible: true
  text: |
    package battleship.ships;

    public class Cruiser extends Ship{
        public Cruiser() {
            super(3, "Cruiser");
        }
    }
  learner_created: true
- name: src/battleship/ships/Destroyer.java
  visible: true
  text: |
    package battleship.ships;

    public class Destroyer extends Ship{
        public Destroyer() {
            super(2, "Destroyer");
        }
    }
  learner_created: true
- name: src/battleship/Field.java
  visible: true
  text: |
    package battleship;

    import battleship.ships.AircraftCarrier;
    import battleship.ships.Ship;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class Field {
        private final static int fieldSize = 11;   //pole do gry -> 10
        private final static char fogOfWar = '~';
        private final static char placedShip = 'O';
        private final static char[] letters = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
        private final char[][] field;
        private ArrayList<Ship> listOfShips = new ArrayList<Ship>();

        public Field() {
            field = new char[fieldSize][fieldSize];
            InitField();
        }

        private void InitField() {
            for (int i = 0; i < fieldSize; i++) {   //wiersz - i
                for (int j = 0; j < fieldSize; j++) {    //kolumna - j
                    if (i == 0 && j == 0) field[i][j] = ' ';
                    else if (i == 0) field[i][j] = (char) (j + '0'); //pierwszy wiersz -> numer kolumny
                    else if (j == 0) field[i][j] = letters[i - 1];//pierwsza kolumna -> litera wiersza
                    else field[i][j] = fogOfWar;
                }
            }
        }

        public void printField() {
            for (int i = 0; i < fieldSize; i++) {
                for (int j = 0; j < fieldSize; j++) {
                    if (field[i][j] == ':') System.out.print("10");
                    else System.out.print(field[i][j] + " ");
                }
                System.out.println();
            }
        }

        public void placeShip(Ship ship, char letter1, char number1, char letter2, char number2) {
            ship.placeShip(letter1, number1, letter2, number2);
            listOfShips.add(ship);

            for (int i = 0; i < ship.getLength(); i++) {
                int letterPosition = 0;
                int numberPosition = (ship.getPosition()[1][i] - '0');
                for (int j = 0; j < letters.length; j++)
                    if (ship.getPosition()[0][i] == letters[j]) {
                        letterPosition = j + 1;
                        break;
                    }
                field[letterPosition][numberPosition] = placedShip;
            }
        }

        public boolean canPlace(char letter1, char number1, char letter2, char number2, int length) {

            if (letter1 > letter2) {
                char temp = letter1;
                letter1 = letter2;
                letter2 = temp;
            }
            if (number1 > number2) {
                char temp = number1;
                number1 = number2;
                number2 = temp;
            }
            char let1 = (char) (letter1 - 'A' + 1);
            char let2 = (char) (letter2 - 'A' + 1);
            for (int i = let1; i <= let2; i++) {
                for (int j = (number1 - '0'); j <= (number2 - '0'); j++) {
                    for (int x = -1; x <= 1; x++) {
                        for (int y = -1; y <= 1; y++) {
                            if(i+x > 0 && i+x < field.length && j + y > 0 && j + y < field.length)
                                if (field[i + x][j + y] == placedShip) return false;
                        }
                    }
                }
            }
            return true;
        }

    }
  learner_created: true
- name: src/battleship/ships/AircraftCarrier.java
  visible: true
  text: |
    package battleship.ships;

    public class AircraftCarrier extends Ship {
        public AircraftCarrier() {
            super(5, "Aircraft Carrier");
        }
    }
  learner_created: true
- name: src/battleship/ships/Ship.java
  visible: true
  text: |
    package battleship.ships;

    public abstract class Ship {
        private final static char[] letters = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
        private int length;
        private String name;
        private char[][] position;     //[0,:] - literka, [1,:] - cyferka

        public Ship(int length, String name) {
            this.length = length;
            position = new char[2][length];
            this.name = name;
        }

        public void placeShip(char letter1, char number1,char letter2, char number2){
            if(letter1 == letter2){
                if(number1 > number2){
                    char temp = number1;
                    number1 = number2;
                    number2 = temp;
                }
                for(int i = 0; i < length; i++){
                    position[0][i] = letter1 ;
                    position[1][i] = (char) (number1 + (char)i);
                    //System.out.println(position[1][i]);
                }
            } else if (number1 == number2) {
                if(letter1 > letter2){
                    char temp = letter1;
                    letter1 = letter2;
                    letter2 = temp;
                }
                for(int i = 0; i < length; i++){
                    position[0][i] = (char) (letter1 + (char)i);
                    position[1][i] = number1;
                    //System.out.println(position[0][i]);
                }
            }
        }

        public int getLength() {
            return length;
        }

        public char[][] getPosition() {
            return position;
        }

        public void setLength(int length) {
            this.length = length;
        }

        public void setPosition(char[][] position) {
            this.position = position;
        }

        public String getName() {
            return name;
        }
    }
  learner_created: true
- name: src/battleship/ships/Battleship.java
  visible: true
  text: |
    package battleship.ships;

    public class Battleship extends Ship{
        public Battleship() {
            super(4, "Battleship");
        }
    }
  learner_created: true
- name: src/battleship/ships/Submarine.java
  visible: true
  text: |
    package battleship.ships;

    public class Submarine extends Ship{

        public Submarine() {
            super(3, "Submarine");
        }
    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import battleship.ships.*;

    import java.util.Scanner;

    public class Game {
        private Field field;

        public void start() {
            char[] tab;
            Ship ship;
            Ship ships[] = {new AircraftCarrier(), new Battleship(), new Submarine(), new Cruiser(), new Destroyer()};

            for(int i = 0; i < 5; i++){
                ship = ships[i];
                tab = readCordsToPlaceShip(ship.getLength(), ship.getName());
                this.field.placeShip(ship, tab[0], tab[1], tab[2], tab[3]);
                this.field.printField();
            }

            /*ship = new AircraftCarrier();
            tab = readCordsToPlaceShip(ship.getLength(), ship.getName());
            this.field.placeShip(ship, tab[0], tab[1], tab[2], tab[3]);
            this.field.printField();

            ship = new Battleship();
            tab = readCordsToPlaceShip(4);
            this.field.placeShip(new Battleship(), tab[0], tab[1], tab[2], tab[3]);
            this.field.printField();

            ship = new Battleship();
            tab = readCordsToPlaceShip(3);
            this.field.placeShip(new Submarine(), tab[0], tab[1], tab[2], tab[3]);
            this.field.printField();

            ship = new Battleship();
            tab = readCordsToPlaceShip(3);
            this.field.placeShip(new Cruiser(), tab[0], tab[1], tab[2], tab[3]);
            this.field.printField();

            ship = new Battleship();
            tab = readCordsToPlaceShip(2);
            this.field.placeShip(new Destroyer(), tab[0], tab[1], tab[2], tab[3]);
            this.field.printField();*/
        }

        private char[] readCordsToPlaceShip(int length, String shipName) {
            System.out.println("Enter the coordinates of the " + shipName + " (" + length + " cells):");
            boolean done = false;
            char letter1 = 0;
            char number1 = 0;
            char letter2 = 0;
            char number2 = 0;
            int num1 = 0;
            int num2 = 0;
            while (!done) {
                done = true;
                Scanner scanner = new Scanner(System.in);

                String input = scanner.next();
                letter1 = input.charAt(0);
                number1 = input.charAt(1);
                if(input.length() == 3) number1+= 9;


                input = scanner.next();
                letter2 = input.charAt(0);
                number2 = input.charAt(1);
                if(input.length() == 3) number2+= 9;

                if (Math.abs(letter1 - letter2) + 1 != length && Math.abs(number1 - number2) + 1 != length) {   //Jezeli dlugosc nieodpowiednia
                    done = false;
                    System.out.println("Error! Wrong length of the " + shipName + "! Try again:");
                } else if (letter1 != letter2 && number1 != number2) {  //Jezeli nie w lini prostej
                    done = false;
                    System.out.println("Error! Wrong " + shipName + " location! Try again:");
                } else if (!field.canPlace(letter1, number1, letter2, number2, length)) {
                    done = false;
                    System.out.println("Error! You placed it too close to another one. Try again:");
                }
            }

            char[] tab = new char[]{letter1, number1, letter2, number2};
            return tab;
        }

        public Game() {
            this.field = new Field();
        }

        public Field getField() {
            return field;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10595#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 27 Mar 2023 18:11:23 UTC"
record: 2
